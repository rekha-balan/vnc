<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid" xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:cs="colorscheme_ignorable_uri" mc:Ignorable="cs">
    <!--BEGIN WPF-->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/DevExpress.Xpf.Themes.NewTheme.v12.1;component/DevExpress.Xpf.Grid/NewTheme/Constants.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <!--END WPF-->
    <ControlTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <ContentPresenter />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowControlHeaderContentTemplate}" TargetType="{x:Type ContentControl}">
        <Border x:Name="ContentBorder">
            <!--BEGIN WPF-->
            <TextBlock.Foreground>
                <DynamicResource ResourceKey="GroupGridRowHeaderTextBrush" />
            </TextBlock.Foreground>
            <!--END WPF-->
            <ContentPresenter />
        </Border>
    </ControlTemplate>
    <Style x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowPresenterStyle}" TargetType="{x:Type dxg:GroupGridRowPresenter}"></Style>
    <!--BEGIN WPF-->
    <Style x:Key="{dxgt:CardViewThemeKey ResourceKey=GroupRowControlExpanderVerticalStyle}" TargetType="{x:Type dx:DXExpander}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="AnimationProgress" Value="0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalExpand" Value="None" />
        <Setter Property="VerticalExpand" Value="FromTopToBottom" />
    </Style>
    <Style x:Key="{dxgt:CardViewThemeKey ResourceKey=GroupRowControlExpanderHorizontalStyle}" TargetType="{x:Type dx:DXExpander}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="AnimationProgress" Value="0" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="HorizontalExpand" Value="FromLeftToRight" />
        <Setter Property="VerticalExpand" Value="None" />
    </Style>
    <ControlTemplate x:Key="{dxgt:CardViewThemeKey ResourceKey=GroupRowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Border x:Name="GroupBorder">
            <ContentPresenter />
        </Border>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).Orientation, RelativeSource={RelativeSource TemplatedParent}}" Value="Vertical" />
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).Orientation, RelativeSource={RelativeSource TemplatedParent}}" Value="Horizontal" />
            <DataTrigger Binding="{Binding Path=IsLastVisibleElementRow}" Value="False" />
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:CardViewThemeKey ResourceKey=GroupRowControlHeaderContentTemplate}" TargetType="{x:Type ContentControl}">
        <Border x:Name="ContentBorder" BorderBrush="#FFB9B9B9" DockPanel.Dock="Top" TextBlock.Foreground="{DynamicResource GroupGridRowHeaderTextBrush}" cs:Name="Border_0001">
            <ContentPresenter />
        </Border>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsRowVisible}" Value="false">
                <Setter Property="Visibility" TargetName="ContentBorder" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).Orientation, RelativeSource={RelativeSource TemplatedParent}}" Value="Horizontal">
                <Setter TargetName="ContentBorder" Property="LayoutTransform">
                    <Setter.Value>
                        <RotateTransform Angle="-90" />
                    </Setter.Value>
                </Setter>
                <Setter Property="DockPanel.Dock" Value="Left" TargetName="ContentBorder" />
                <Setter Property="VerticalAlignment" Value="Stretch" TargetName="ContentBorder" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <SolidColorBrush x:Key="BorderFocusedBrush" Color="#FFF78A09" cs:Name="SolidColorBrush_0001" />
    <SolidColorBrush x:Key="BorderSelectedUnfocusedBrush" Color="#FFB9B9B9" cs:Name="SolidColorBrush_0002" />
    <!--END WPF-->
    <SolidColorBrush x:Key="RowControlContainerValidationErrorBackground" cs:Name="SolidColorBrush_0003">#FFFFD9D9</SolidColorBrush>
    <SolidColorBrush x:Key="RowControlContainerTransparentBackground" cs:Name="SolidColorBrush_0004">#00000000</SolidColorBrush>
    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=RowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid>
            <!--ONLY SL<Grid.Background>
                <Binding Path="(dxe:BaseEdit.HasValidationError)">
                    <Binding.Converter>
                        <dx:BoolToObjectConverter TrueValue="{StaticResource RowControlContainerValidationErrorBackground}"
                            FalseValue="{StaticResource RowControlContainerTransparentBackground}"/>
                    </Binding.Converter>
                </Binding>
            </Grid.Background>ONLY SL-->
            <Border x:Name="RowContentBorder">
                <!--BEGIN WPF-->
                <Border.Background>
                    <Binding Path="Background" RelativeSource="{RelativeSource TemplatedParent}" />
                </Border.Background>
                <!--END WPF-->
                <!--ONLY SL<Border.Background>
                <Binding Path="SelectionState">
                    <Binding.Converter>
                        <dx:EnumToObjectConverter>
                            <dx:EnumToObjectConverter.Values>
                                <dx:EnumObjectProvider x:Key="None" Value="Transparent"/>
                                <dx:EnumObjectProvider x:Key="Selected"
                                                       Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderSelectedBrush}}"/>
                                <dx:EnumObjectProvider x:Key="Focused"
                                                       Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderFocusedBrush}}"/>
                            </dx:EnumToObjectConverter.Values>
                        </dx:EnumToObjectConverter>
                    </Binding.Converter>
                </Binding>
            </Border.Background>ONLY SL-->
            </Border>
            <Border x:Name="RowBottomLine" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}">
                <Border.BorderThickness>
                    <Binding Path="View.ShowHorizontalLines">
                        <Binding.Converter>
                            <dx:BoolToObjectConverter TrueValue="0,0,0,1" FalseValue="0" />
                        </Binding.Converter>
                    </Binding>
                </Border.BorderThickness>
            </Border>
            <ContentPresenter />
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxg:RowData.CurrentRowData).(dxe:BaseEdit.HasValidationError), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxg:RowData.CurrentRowData).IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="RowContentBorder" Property="Background" Value="#FFB9B9B9" cs:Name="Setter_0001" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.FixedGroupsAdorner}" TargetType="{x:Type dxg:FixedGroupsAdorner}">
        <Setter Property="AdornerHeight" Value="20" />
        <Setter Property="AdornerBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" cs:Name="LinearGradientBrush_0040">
                    <GradientStop Color="#33000000" Offset="0" cs:Name="GradientStop_0001" />
                    <GradientStop Color="#00000000" Offset="1" cs:Name="GradientStop_0002" />
                    <GradientStop Color="#14000000" Offset="0.35" cs:Name="GradientStop_0003" />
                    <GradientStop Color="#1E000000" Offset="0.15" cs:Name="GradientStop_0004" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.RowIndicatorControl}" TargetType="{x:Type dxg:RowIndicatorControl}">
        <Setter Property="Foreground" Value="#FF373A3D" cs:Name="Setter_0002" />
    </Style>
    <Style x:Key="{dxgt:GridRowThemeKey ResourceKey=DetailTotalSummaryIndentBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="#FFB9B9B9" cs:Name="Setter_0003" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
    </Style>
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GridDetailExpandButtonContainer}" TargetType="{x:Type dxg:GridDetailExpandButtonContainer}">
        <Setter Property="IsMasterRowExpanded" Value="{Binding IsMasterRowExpanded}" />
        <Setter Property="RowPosition" Value="Single" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxg:GridDetailExpandButtonContainer">
                    <dxg:GridDetailExpandButton Name="PART_ExpandButton" Command="{Binding View.Commands.ChangeMasterRowExpanded}" CommandParameter="{Binding Path=RowHandle.Value}" IsChecked="{Binding Path=IsRowExpanded, Mode=OneWay}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>