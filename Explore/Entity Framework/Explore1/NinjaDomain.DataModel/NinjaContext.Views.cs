//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(NinjaDomain.DataModel.NinjaContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets546b3d96fc332dc57f33f8510db0c1272f2dd2adbd2cf82667404123c673c8d0))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets546b3d96fc332dc57f33f8510db0c1272f2dd2adbd2cf82667404123c673c8d0 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "546b3d96fc332dc57f33f8510db0c1272f2dd2adbd2cf82667404123c673c8d0"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Clan")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Ninja")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.NinjaEquipment")
            {
                return GetView2();
            }

            if (extentName == "NinjaContext.Clans")
            {
                return GetView3();
            }

            if (extentName == "NinjaContext.Ninjas")
            {
                return GetView4();
            }

            if (extentName == "NinjaContext.Equipment")
            {
                return GetView5();
            }

            if (extentName == "NinjaContext.NinjaEquipment_Ninja")
            {
                return GetView6();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Clan.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Clan
        [CodeFirstDatabaseSchema.Clan](T1.Clan_Id, T1.Clan_ClanName)
    FROM (
        SELECT 
            T.Id AS Clan_Id, 
            T.ClanName AS Clan_ClanName, 
            True AS _from0
        FROM NinjaContext.Clans AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Ninja.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Ninja
        [CodeFirstDatabaseSchema.Ninja](T1.Ninja_Id, T1.Ninja_ClanId, T1.Ninja_DateOfBirth, T1.Ninja_DateOfDeath, T1.Ninja_Name, T1.Ninja_ServedInOniwaban)
    FROM (
        SELECT 
            T.Id AS Ninja_Id, 
            T.ClanId AS Ninja_ClanId, 
            T.DateOfBirth AS Ninja_DateOfBirth, 
            T.DateOfDeath AS Ninja_DateOfDeath, 
            T.Name AS Ninja_Name, 
            T.ServedInOniwaban AS Ninja_ServedInOniwaban, 
            True AS _from0
        FROM NinjaContext.Ninjas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.NinjaEquipment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing NinjaEquipment
        [CodeFirstDatabaseSchema.NinjaEquipment](T3.NinjaEquipment_Id, T3.NinjaEquipment_Name, T3.NinjaEquipment_Type, T3.[NinjaEquipment.Ninja_Id])
    FROM (
        SELECT T1.NinjaEquipment_Id, T2.NinjaEquipment_Name, T2.NinjaEquipment_Type, T1.[NinjaEquipment.Ninja_Id], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.NinjaEquipment_Ninja_Source).Id AS NinjaEquipment_Id, 
                Key(T.NinjaEquipment_Ninja_Target).Id AS [NinjaEquipment.Ninja_Id], 
                True AS _from1
            FROM NinjaContext.NinjaEquipment_Ninja AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS NinjaEquipment_Id, 
                T.Name AS NinjaEquipment_Name, 
                CAST(T.Type AS [Edm.Int32]) AS NinjaEquipment_Type, 
                True AS _from0
            FROM NinjaContext.Equipment AS T) AS T2
            ON T1.NinjaEquipment_Id = T2.NinjaEquipment_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for NinjaContext.Clans.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Clans
        [NinjaDomain.DataModel.Clan](T1.Clan_Id, T1.Clan_ClanName)
    FROM (
        SELECT 
            T.Id AS Clan_Id, 
            T.ClanName AS Clan_ClanName, 
            True AS _from0
        FROM CodeFirstDatabase.Clan AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NinjaContext.Ninjas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Ninjas
        [NinjaDomain.DataModel.Ninja](T1.Ninja_Id, T1.Ninja_ClanId, T1.Ninja_DateOfBirth, T1.Ninja_DateOfDeath, T1.Ninja_Name, T1.Ninja_ServedInOniwaban)
    FROM (
        SELECT 
            T.Id AS Ninja_Id, 
            T.ClanId AS Ninja_ClanId, 
            T.DateOfBirth AS Ninja_DateOfBirth, 
            T.DateOfDeath AS Ninja_DateOfDeath, 
            T.Name AS Ninja_Name, 
            T.ServedInOniwaban AS Ninja_ServedInOniwaban, 
            True AS _from0
        FROM CodeFirstDatabase.Ninja AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NinjaContext.Equipment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Equipment
        [NinjaDomain.DataModel.NinjaEquipment](T1.NinjaEquipment_Id, T1.NinjaEquipment_Name, T1.NinjaEquipment_Type) WITH 
        RELATIONSHIP(CREATEREF(NinjaContext.Ninjas, ROW(T1.[NinjaEquipment_Ninja.NinjaEquipment_Ninja_Target.Id]),[NinjaDomain.DataModel.Ninja]),[NinjaDomain.DataModel.NinjaEquipment_Ninja],NinjaEquipment_Ninja_Source,NinjaEquipment_Ninja_Target) 
    FROM (
        SELECT 
            T.Id AS NinjaEquipment_Id, 
            T.Name AS NinjaEquipment_Name, 
            CAST(T.Type AS [NinjaDomain.DataModel.EquipmentType]) AS NinjaEquipment_Type, 
            True AS _from0, 
            T.Ninja_Id AS [NinjaEquipment_Ninja.NinjaEquipment_Ninja_Target.Id]
        FROM CodeFirstDatabase.NinjaEquipment AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NinjaContext.NinjaEquipment_Ninja.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing NinjaEquipment_Ninja
        [NinjaDomain.DataModel.NinjaEquipment_Ninja](T3.[NinjaEquipment_Ninja.NinjaEquipment_Ninja_Source], T3.[NinjaEquipment_Ninja.NinjaEquipment_Ninja_Target])
    FROM (
        SELECT -- Constructing NinjaEquipment_Ninja_Source
            CreateRef(NinjaContext.Equipment, row(T2.[NinjaEquipment_Ninja.NinjaEquipment_Ninja_Source.Id]), [NinjaDomain.DataModel.NinjaEquipment]) AS [NinjaEquipment_Ninja.NinjaEquipment_Ninja_Source], 
            T2.[NinjaEquipment_Ninja.NinjaEquipment_Ninja_Target]
        FROM (
            SELECT -- Constructing NinjaEquipment_Ninja_Target
                T1.[NinjaEquipment_Ninja.NinjaEquipment_Ninja_Source.Id], 
                CreateRef(NinjaContext.Ninjas, row(T1.[NinjaEquipment_Ninja.NinjaEquipment_Ninja_Target.Id]), [NinjaDomain.DataModel.Ninja]) AS [NinjaEquipment_Ninja.NinjaEquipment_Ninja_Target]
            FROM (
                SELECT 
                    T.Id AS [NinjaEquipment_Ninja.NinjaEquipment_Ninja_Source.Id], 
                    T.Ninja_Id AS [NinjaEquipment_Ninja.NinjaEquipment_Ninja_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.NinjaEquipment AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
