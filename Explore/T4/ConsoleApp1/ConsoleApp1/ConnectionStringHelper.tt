<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System.Configuration;

public static class ConnectionStrings
{
<#
foreach (XElement connStr in ReadConfig())
{
	string cnName = connStr.Attribute(XName.Get("name")).Value;
	string propName = CleanName(cnName);
#>
	public static string <#= propName #>
	{
		get { return ConfigurationManager.ConnectionStrings["<#= cnName #>"].ConnectionString; }
	}
<#
}
#>
}

<#+

private string CleanName(string name)
{
	return name.Replace(" ", string.Empty);
}

private IEnumerable<XElement> ReadConfig()
{
	string configPath = GetConfigFilePath();

	if (string.IsNullOrEmpty(configPath))
	{
		return new List<XElement>();
	}

	XDocument config = XDocument.Load(configPath);
	XElement connectionElement = config.Root.Element(XName.Get("connectionStrings"));

	if (connectionElement == null)
	{
		Error("connectionStrings node was not found in the config file");
		return new List<XElement>();
	}

	return connectionElement.Elements();
}

private string GetConfigFilePath()
{
	FileInfo fileInfo = new FileInfo(Host.TemplateFile);
	string currentFolder = fileInfo.Directory.FullName;

	string appConfig = Path.Combine(currentFolder, "App.config");
	string webConfig = Path.Combine(currentFolder, "Web.config");

	if (File.Exists(appConfig)) { return appConfig; }
	if (File.Exists(webConfig)) { return webConfig; }

	Error("Could not find a configuration file!");

	return string.Empty;
}
#>